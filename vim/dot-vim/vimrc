" Vundle Plugins {
    if filereadable(expand('~/.vim/bundles-linux.vim'))
        source ~/.vim/bundles-linux.vim
    endif
" }

" Basic Setting {
    syntax on
    set backspace=indent,eol,start
    set nu
    set tabstop=4
    set shiftwidth=4
    set expandtab
    set hlsearch
    set encoding=utf8
" }

" Cursorline Setting {
    set cursorline
    hi CursorLine cterm=NONE ctermbg=238
    hi CursorLineNr cterm=bold ctermbg=Red ctermbg=NONE

" }

" Python {
    au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set fileformat=unix |
    \ set encoding=utf-8
" }

" Makefile {
    autocmd FileType make setlocal noexpandtab
" }

" Key Mapping {
    " - show tab and line break by F5
    set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
    noremap <F5> :set list!<CR>
    inoremap <F5> <C-o>:set list!<CR>
    cnoremap <F5> <C-c>:set list!<CR>

    " - resize window CTRL+(h|j|k|l)
    noremap <C-j> :resize +1<CR>
    noremap <C-k> :resize -1<CR>
    noremap <C-h> :vertical resize -1<CR>
    noremap <C-l> :vertical resize +1<CR>

    " - indent and unindent on each mode
    "nnoremap <Tab> >>_
    "nnoremap <S-Tab> <<_
    vnoremap > >gv
    vnoremap < <gv
    " inoremap <S-Tab> <C-D>
    " vnoremap <Tab> >gv
    " remap <S-Tab> <gv
" }

" Eidtor {
    " Tab {
        " Return indent (all whitespace at start of a line), converted from
        " tabs to spaces if what = 1, or from spaces to tabs otherwise.
        " When converting to tabs, result has no redundant spaces.
        function! Indenting(indent, what, cols)
          let spccol = repeat(' ', a:cols)
          let result = substitute(a:indent, spccol, '\t', 'g')
          let result = substitute(result, ' \+\ze\t', '', 'g')
          if a:what == 1
            let result = substitute(result, '\t', spccol, 'g')
          endif
          return result
        endfunction

        " Convert whitespace used for indenting (before first non-whitespace).
        " what = 0 (convert spaces to tabs), or 1 (convert tabs to spaces).
        " cols = string with number of columns per tab, or empty to use 'tabstop'.
        " The cursor position is restored, but the cursor will be in a different
        " column when the number of characters in the indent of the line is changed.
        function! IndentConvert(line1, line2, what, cols)
          let savepos = getpos('.')
          let cols = empty(a:cols) ? &tabstop : a:cols
          execute a:line1 . ',' . a:line2 . 's/^\s\+/\=Indenting(submatch(0), a:what, cols)/e'
          call histdel('search', -1)
          call setpos('.', savepos)
        endfunction
        command! -nargs=? -range=% Sp2tab call IndentConvert(<line1>,<line2>,0,<q-args>)
        command! -nargs=? -range=% Tab2sp call IndentConvert(<line1>,<line2>,1,<q-args>)
        command! -nargs=? -range=% RetabIndent call IndentConvert(<line1>,<line2>,&et,<q-args>)
    " }

    " Json {
        function! FormatJSON()
          :%!python -m json.tool
        endfunction
    "}
" }
